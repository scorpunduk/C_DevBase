#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>


/*	------------------------------------------------------------------------------------- 
	шаблоны октетов
*/
static const char octet_template[] =
{	
	0b10000000, // 10xxxxxx - рядовой октет в многобайтовом символе
	0b11000000, // 110xxxxx - для двухбайтового символа	
	0b11100000, // 1110xxxx - для трёхбайтового символа	
	0b11110000 // 11110xxx - для четырёхбайтового символа
};



/*  -------------------------------------------------------------------------------------
	битовые маски для очистки полученных в результате сдвига байт от лишних значащих бит
*/
static const char octet_clean[] =
{

	0b00111111,	// для рядового октета	
	0b00011111,
	0b00001111,
	0b00000111
};



/*	-------------------------------------------------------------------------------------
	массив граничных значений для числовых кодов символов по юникод
	после которых количество байт для кодирования кода unicode в utf-8 увеличивется на 1
	До первого значения в массиве требуется 1 байт
	Последнее значение в массиве - принятый максимально возможный код unicode
*/
static const uint32_t octet_cap[] = 
	{ 
		0x7F,		// 1 байт 
		0x7FF,		// 2 байта
		0xFFFF,		// 3 байта
		0x10FFFF	// 4 байта
	};



/*	-------------------------------------------------------------------------------------
	количество сдвигов вправо для получения значащих бит,
	предназначенных для вставки в соответсвющий октет	
*/
static const char bitset_shifts[] = { 0, 6, 12, 18 };



/* 	-------------------------------------------------------------------------------------
	функция должна возвращать количество октетов для кодирвания символа по юникоду
	unicode_value - код символа по юникоду
*/
int count_octet_number(uint32_t unicode_value);



/* 	-------------------------------------------------------------------------------------
	функция устанавливает байты последовательности utf-8 в массиве 
	unicode_value - 	код символа по юникоду
	symbol_utf_code - 	ссылка на массив для заполнения вычисленными байтами по utf-8
						передаваемый массив всегда должен состоять из 5 элементов
						количество элементов массива не передаётся как аргумент
	алгоритм кодирования см. https://ru.wikipedia.org/wiki/UTF-8
*/
void set_utf_code(uint32_t unicode_value, char * symbol_utf_code);



//	--------------------------------------------------------------------------------------

//	переводит символ из кодировки koi8 в юникод
uint32_t koi_to_unicode(char symbol);

//	ничего кроме ненависти
//	символы идут не по порядку, не нашёл ничего лучше, чем тупо выписать их
//	в порядке соответствующем нормальным кодировками
static const unsigned char koi8codes[] =
{
	0xE1 , //А
	0xE2 , //Б
	0xF7 , //В
	0xE7 , //Г
	0xE4 , //Д
	0xE5 , //Е
	0xF6 , //Ж
	0xFA , //З
	0xE9 , //И
	0xEA , //Й
	0xEB , //К
	0xEC , //Л
	0xED , //М
	0xEE , //Н
	0xEF , //О
	0xF0 , //П
	0xF2 , //Р
	0xF3 , //С
	0xF4 , //Т
	0xF5 , //У
	0xE6 , //Ф
	0xE8 , //Х
	0xE3 , //Ц
	0xFE , //Ч
	0xFB , //Ш
	0xFD , //Щ
	0xFF , //Ъ
	0xF9 , //Ы
	0xF8 , //Ь
	0xFC , //Э
	0xE0 , //Ю
	0xF1 , //Я

	// можно было бы использовать разницу, что сократило бы место, но пусть так 

	0xC1 , //а
	0xC2 , //б
	0xD7 , //в
	0xC7 , //г
	0xC4 , //д
	0xC5 , //е
	0xD6 , //ж
	0xDA , //з
	0xC9 , //и
	0xCA , //й
	0xCB , //к
	0xCC , //л
	0xCD , //м
	0xCE , //н
	0xCF , //о
	0xD0 , //п
	0xD2 , //р
	0xD3 , //с
	0xD4 , //т
	0xD5 , //у
	0xC6 , //ф
	0xC8 , //х
	0xC3 , //ц
	0xDE , //ч
	0xDB , //ш
	0xDD , //щ
	0xDF , //ъ
	0xD9 , //ы
	0xD8 , //ь
	0xDC , //э
	0xC0 , //ю
	0xD1 , //я
};

//	коды Ё и ё по koi8
static const uint32_t koi8codes_addition[] = { 0xA3, 0xB3};


//	-------------------------------------------------------------------------------------

//	переводит символ из кодировки windows-1251 в юникод
uint32_t cp1251_to_unicode(char symbol);

//	разница с символом юникод для основных символов русского алфавита по windows1251
static const uint32_t cp1251_unicode_diff = 0x0350;

//	коды Ё и ё по windows1251
static const uint32_t cp1251_addition[] = { 0xA8, 0xB8};


//	-------------------------------------------------------------------------------------

//	переводит символ из кодировки iso 8895-5 в юникод
uint32_t iso8895_5_to_unicode(char symbol);

// разница с символом юникод для основных символов русского алфавита по iso8895-5
static const uint32_t iso8895_5_unicode_diff = 0x0360;

// коды Ё и ё по iso-8895-5
static const uint32_t iso8895_5_addition[] = { 0xA1, 0xB1};


//	--------------------------------------------------------------------------------------

// коды Ё и ё по юникоду
static const uint32_t unicode_addition[] = { 0x0401, 0x0451 };